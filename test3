from qiskit import QuantumCircuit, transpile, assemble, Aer
import random

def quantum_random_bit_generator(num_bits):
    # Create a quantum circuit with num_bits qubits
    circuit = QuantumCircuit(num_bits, num_bits)
    
    # Apply Hadamard gates to create superposition
    for i in range(num_bits):
        circuit.h(i)
    
    # Measure the qubits
    circuit.measure(range(num_bits), range(num_bits))
    
    # Simulate the circuit on a quantum simulator
    simulator = Aer.get_backend('qasm_simulator')
    job = assemble(transpile(circuit, simulator), shots=1)
    result = simulator.run(job).result()
    
    # Get the measured classical bits
    random_bits = list(result.get_counts().keys())[0]
    
    return random_bits

# Generate a random bit string
random_bits = quantum_random_bit_generator(4)

# Convert the random bits to an integer
random_integer = int(random_bits, 2)

# Use a classical random number generator to decide the sign
if random.random() < 0.5:
    random_integer *= -1

print("Random integer (including negative values):", random_integer)
