import numpy as np
import matplotlib.pyplot as plt
from qiskit import QuantumCircuit, Aer, execute

# Create a quantum circuit with a single qubit
qubit = QuantumCircuit(1, 1)

# Apply Hadamard gate to create superposition
qubit.h(0)

# Define Pauli operators
paulis = ['X', 'Y', 'Z']

# Simulate and measure Pauli observables
backend = Aer.get_backend('qasm_simulator')
results = []

for pauli in paulis:
    # Create a copy of the original circuit to avoid interference
    circuit = qubit.copy()
    
    # Apply Pauli operator gate
    if pauli == 'X':
        circuit.x(0)
    elif pauli == 'Y':
        circuit.y(0)
    elif pauli == 'Z':
        circuit.z(0)
    
    # Measure the qubit
    circuit.measure(0, 0)
    
    # Execute the circuit
    job = execute(circuit, backend, shots=1000)
    result = job.result()
    counts = result.get_counts()
    results.append(counts)

# Visualize the measurement outcomes
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for i, pauli in enumerate(paulis):
    counts = results[i]
    axs[i].bar(counts.keys(), counts.values())
    axs[i].set_title(f"Pauli {pauli} Measurement")
    axs[i].set_xlabel('Measurement Outcomes')
    axs[i].set_ylabel('Counts')

plt.tight_layout()
plt.show()